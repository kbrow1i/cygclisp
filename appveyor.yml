version: '{build}'
skip_tags: true
environment:
  CYGWIN_MIRROR: http://cygwin.mirror.constant.com
  CACHE: C:\cache
  matrix:
  - BUILD: x86_64-pc-cygwin
  - BUILD: i686-pc-cygwin
install:
- if "%BUILD%"=="x86_64-pc-cygwin" set SETUP=setup-x86_64.exe && set CYGWIN_ROOT=C:\cygwin64
- if "%BUILD%"=="i686-pc-cygwin" set SETUP=setup-x86.exe && set CYGWIN_ROOT=C:\cygwin
- if not exist %CACHE% mkdir %CACHE%
- appveyor DownloadFile http://cygwin.com/%SETUP% -FileName %CACHE%\%SETUP%
- echo Updating Cygwin
- '%CACHE%\%SETUP% -qnNdO -R "%CYGWIN_ROOT%" -s "%CYGWIN_MIRROR%" -l "%CACHE%"'
- if "%BUILD%"=="x86_64-pc-cygwin" set DEPS=mercurial,cygport,libdb-devel,libgdbm-devel,libpcre-devel,libsigsegv-devel,libX11-devel,libXext-devel,libXpm-devel
- if "%BUILD%"=="i686-pc-cygwin" set DEPS=mercurial,cygport,libdb-devel,libgdbm-devel,libpcre-devel,libsigsegv-devel,ffcall,libfcgi-devel,libgcrypt-devel,libglade2.0-devel,libpq-devel,libsvm-devel,postgresql-devel,libX11-devel,libXext-devel,libXpm-devel,libdbus1-devel,libpq5
- echo Installing build dependencies
- '%CACHE%\%SETUP% -qnNdO -R "%CYGWIN_ROOT%" -s "%CYGWIN_MIRROR%" -l "%CACHE%" -P "%DEPS%"'
- echo Install done
cache:
- C:\cache
build_script:
- SET PATH=%CYGWIN_ROOT%/bin
- '%CYGWIN_ROOT%\bin\bash -lc "cd $APPVEYOR_BUILD_FOLDER; ./appveyor.sh"'
artifacts:
- path: artifact.tar.xz
