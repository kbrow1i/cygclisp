NAME="clisp"
VERSION=2.48
RELEASE=5
HOMEPAGE="http://clisp.cons.org/"

PKG_NAMES="${PN} ${PN}-clx ${PN}-gdi ${PN}-gtk2"

clisp_CATEGORY="Devel Interpreters Math Shells"
clisp_clx_CATEGORY="Interpreters"
clisp_gdi_CATEGORY="Interpreters"
clisp_gtk2_CATEGORY="Interpreters"

clisp_SUMMARY="An ANSI Common Lisp implementation"
clisp_clx_SUMMARY="The new-clx module linkset for clisp"
clisp_gdi_SUMMARY="The GDI module linkset for clisp"
clisp_gtk2_SUMMARY="The GTK2 + dbus module linkset for clisp"

clisp_DESCRIPTION="ANSI Common Lisp is a high-level, general-purpose programming
language.  GNU CLISP is a Common Lisp implementation by Bruno Haible
of Karlsruhe University and Michael Stoll of Munich University, both
in Germany.  It mostly supports the Lisp described in the ANSI Common
Lisp standard.  GNU CLISP includes an interpreter, a compiler, a
debugger, CLOS, MOP, a foreign language interface, sockets, i18n, fast
bignums, and more.  An X11 interface is available through CLX, Garnet,
CLUE/CLIO.  GNU CLISP runs Maxima, ACL2, and many other Common Lisp
packages.  This binary distribution was built with the following
modules:  rawsock, dirkey, wildcards, bindings/win32, berkeley-db,
zlib, pcre, fastcgi, postgresql, libsvm, and gdbm."

clisp_clx_DESCRIPTION="This is the linkset full+new-clx for X.Org."

clisp_gdi_DESCRIPTION="This is the linkset full+gdi with the experimental GDI module (native
Win32 GDI)."

clisp_gtk2_DESCRIPTION="This is the linkset full+gtk2 for X.Org, with dbus included."

clisp_clx_REQUIRES="clisp"
clisp_gdi_REQUIRES="clisp"
clisp_gtk2_REQUIRES="clisp"

clisp_CONTENTS=" \
--exclude=usr/lib/${PN}-${PV}/full+*
--exclude=usr/share/doc/${PN}/new-clx
--exclude=usr/share/doc/${PN}/gtk2
--exclude=usr/share/doc/${PN}/dbus
--exclude=usr/share/doc/${PN}/gdi
usr
"

clisp_clx_CONTENTS=" \
usr/lib/${PN}-${PV}/full+new-clx
usr/share/doc/${PN}/new-clx
"

clisp_gdi_CONTENTS=" \
usr/lib/${PN}-${PV}/full+gdi
usr/share/doc/${PN}/gdi
"

clisp_gtk2_CONTENTS=" \
usr/lib/${PN}-${PV}/full+gtk2
usr/share/doc/${PN}/gtk2
usr/share/doc/${PN}/dbus
"

# SRC_URI="ftp://ftp.gnu.org/pub/gnu/${PN}/release/${PV}/${PN}-${PV}.tar.gz"
# SRC_URI="ftp://sunsite.unc.edu/pub/Linux/devel/lang/lisp/${PN}-${PV}.tar.bz2"
# SRC_URI="http://puzzle.dl.sourceforge.net/sourceforge/${PN}/${PN}-${PV}.tar.bz2"
SRC_URI="http://prdownloads.sourceforge.net/${PN}/${PN}-${PV}.tar.bz2?download"

PATCH_URI="2.48-gdi.patch"
PATCH_URI+=" 2.48-reini.patch"	# formerly 2.48-3.src.patch
PATCH_URI+=" 2.48-Handle.patch"
PATCH_URI+=" 2.48-HEAPCODES.patch"
PATCH_URI+=" 2.48-uuid.patch"
PATCH_URI+=" 2.48-makemake.patch"
PATCH_URI+=" 2.48-bdb.patch"
PATCH_URI+=" 2.48-x86_64.patch"

MAKEOPTS+=" -j1"

DEPEND="libglade2.0-devel
	libpcre-devel
	libpq-devel
	libgdbm-devel
	ffcall
	libdb4.8-devel
	libfcgi-devel
	libsigsegv
"

MODULES="rawsock wildcard dirkey bindings/win32 berkeley-db pcre postgresql fastcgi zlib libsvm gdbm"
EXTRA_MODULES="clx/new-clx gtk2 gdi"
ALLMODULES="$MODULES $EXTRA_MODULES dbus"
WITHMODS="--with-modules=$(echo $ALLMODULES|sed -e's, , --with-modules=,g')"

CYGCONF_ARGS="--fsstnd=redhat --with-readline --with-gettext--with-ffcall
        $WITHMODS --docdir=/usr/share/doc/${PN}"

export CFLAGS
LDFLAGS="-Wl,--stack,8388608"
export LDFLAGS

# do not strip for (disassemble)
RESTRICT="debuginfo strip"

src_compile() {
   cd ${S}
   verbose ./configure --prefix=/usr ${CYGCONF_ARGS} ${B} || error "configure failed"

   # first produce full without the three seperate EXTRA_MODULES 
   cd ${B}
   cygmake "MODULES=${ALLMODULES}"
   rm -rf full
   cygmake full "MODULES=${MODULES}"
   # now use the linkkit for the three separate modules
   for m in ${EXTRA_MODULES}; do
      fixed_m=`echo $m | sed s,clx/,,`
      if [ "$m" = "gtk2" ]; then m="gtk2 dbus"; fi
      CLISP_LINKKIT=. ./clisp-link add full "full+${fixed_m}" $m || error "full+${fixed_m} failed"
   done
}

src_test() {
  cd ${B}
  cygmake check
  cygmake mod-check "MODULES=${MODULES}"
  for m in ${EXTRA_MODULES}; do
    fixed_m=`echo $m | sed s,clx/,,`
    ./clisp -K full+${fixed_m} -E UTF-8 -Epathname 1:1 -Emisc 1:1 -norc -C -i tests/tests -x "(ext:exit (plusp (or (run-some-tests :dirlist '($m)) 0)))"
  done
}


src_install() {
   cd ${B}
   cyginstall

   # FIXME: The FFI loads it from the .lisp path, installed it must be in full
   exeinto /usr/lib/${PN}-${PV}/full
   doexe libsvm/svm.dll

   for m in $EXTRA_MODULES; do
       fixed_m=`echo $m | sed s,clx/,,`
       docinto ${fixed_m}
       dodoc $m/README $m/ChangeLog $m/TODO $m/COPYRIGHT $m/*.lisp $m/*.tst
       insdir=/usr/lib/${PN}-${PV}/full+${fixed_m}
       insinto ${insdir}
       doins full+${fixed_m}/*
       chmod 0755 ${D}${insdir}/lisp.exe
       exeinto ${insdir}
       doexe libsvm/svm.dll
       # resolve .o as links; force relative links
       cd ${D}${insdir}
       for o in *.o *.a *.dvi; do
           if [ -e "../full/$o" ]; then
               ln -fs ../full/$o $o
           fi
       done
       cd ${B}
   done
   docinto dbus
   dodoc dbus/*.lisp dbus/*.tst
}

## Reini's comments:

# --with-libpari-prefix=/usr/local --with-module=pari fails at freeall() and init_opts
# --without-unicode see sf.net bugs
# --with-module=matlab requires the redistributable matlab dll's in your path. 
#   maybe this requires an extra clisp-matlab package. Fixed by --with-dynamic-modules
#   but --with-dynamic-modules is too big and only suitable for on-demand clisp-xxx packages
# --with-module=fastcgi is linked statically, so (FASTCGI:ACCEPT) works in 
#   clisp -K full without installed fcgi. Note: Tests with lighttpd dumped core.
# --with-module=gdi is Dan Stangers experimental gdi interface (native windows gui)
# --with-dynamic-modules fixed, but not enabled. Too big.
# --with-jitc=lightning in work. Too slow yet and still in its infancy.
# --with-threads works, but too slow
# --with-wildcard added with 2.48-1 

