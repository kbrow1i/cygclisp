NAME="clisp"
VERSION=2.49
RELEASE=1
HOMEPAGE="http://clisp.cons.org/"

clisp_CATEGORY="Devel Interpreters Math Shells"
clisp_SUMMARY="An ANSI Common Lisp implementation"
clisp_DESCRIPTION="ANSI Common Lisp is a high-level, general-purpose programming
language.  GNU CLISP is a Common Lisp implementation by Bruno Haible
of Karlsruhe University and Michael Stoll of Munich University, both
in Germany.  It mostly supports the Lisp described in the ANSI Common
Lisp standard.  GNU CLISP includes an interpreter, a compiler, a
debugger, CLOS, MOP, a foreign language interface, sockets, i18n, fast
bignums, and more.  An X11 interface is available through CLX, Garnet,
CLUE/CLIO.  GNU CLISP runs Maxima, ACL2, and many other Common Lisp
packages."

if [ "${ARCH}" = i686 ]
then
    
    PKG_NAMES="${PN} ${PN}-clx ${PN}-gdi ${PN}-gtk2"

    clisp_clx_CATEGORY="Interpreters"
    clisp_gdi_CATEGORY="Interpreters"
    clisp_gtk2_CATEGORY="Interpreters"

    clisp_clx_SUMMARY="The new-clx module linkset for clisp"
    clisp_gdi_SUMMARY="The GDI module linkset for clisp"
    clisp_gtk2_SUMMARY="The GTK2 + dbus module linkset for clisp"

    clisp_clx_DESCRIPTION="This is the linkset full+new-clx for X.Org."
    clisp_gdi_DESCRIPTION="This is the linkset full+gdi with the experimental GDI module (native
Win32 GDI)."
    clisp_gtk2_DESCRIPTION="This is the linkset full+gtk2 for X.Org, with dbus included."

    clisp_clx_REQUIRES="clisp"
    clisp_gdi_REQUIRES="clisp"
    clisp_gtk2_REQUIRES="clisp"

    clisp_CONTENTS="
--exclude=usr/lib/${PN}-${PV}/full+*
--exclude=usr/share/doc/${PN}/new-clx
--exclude=usr/share/doc/${PN}/gtk2
--exclude=usr/share/doc/${PN}/gdi
usr
"
    clisp_clx_CONTENTS="
usr/lib/${PN}-${PV}/full+new-clx
usr/share/doc/${PN}/new-clx
"
    clisp_gdi_CONTENTS="
usr/lib/${PN}-${PV}/full+gdi
usr/share/doc/${PN}/gdi
"
    clisp_gtk2_CONTENTS="
usr/lib/${PN}-${PV}/full+gtk2
"
fi

# SRC_URI="ftp://ftp.gnu.org/pub/gnu/${PN}/release/${PV}/${PN}-${PV}.tar.gz"
# SRC_URI="ftp://sunsite.unc.edu/pub/Linux/devel/lang/lisp/${PN}-${PV}.tar.bz2"
# SRC_URI="http://puzzle.dl.sourceforge.net/sourceforge/${PN}/${PN}-${PV}.tar.bz2"
SRC_URI="http://prdownloads.sourceforge.net/${PN}/${PN}-${PV}.tar.bz2?download"

PATCH_URI="2.48-gdi.patch"
PATCH_URI+=" 2.48-HEAPCODES.patch"
PATCH_URI+=" 2.48-Handle.patch"
PATCH_URI+=" 2.48-x86_64.patch"
PATCH_URI+=" 2.49-gdbm_tst.patch"
PATCH_URI+=" 2.49-gtk2_lib_name.patch"
PATCH_URI+=" 2.49-implicit_declaration.patch"
PATCH_URI+=" 2.49-libsvm.patch"
PATCH_URI+=" 2.49-makemake.patch"
PATCH_URI+=" 2.49-no_symlink_dll.patch"
PATCH_URI+=" 2.49-socket_tst.patch"
PATCH_URI+=" 2.49-uuid.patch"

MAKEOPTS+=" -j1"

case "${ARCH}" in
    i686)
	DEPEND="
		libglade2.0-devel
		libpcre-devel
		libpq-devel
		libgdbm-devel
		ffcall
		libdb4.8-devel
		libfcgi-devel
		libsigsegv
		libsvm-devel
"
	MODULES="rawsock wildcard dirkey bindings/win32 berkeley-db pcre postgresql fastcgi zlib gdbm libsvm"
	EXTRA_MODULES="clx/new-clx gtk2 gdi"
	ALLMODULES="${MODULES} ${EXTRA_MODULES} dbus"
	WITHMODS="--with-modules=$(echo ${ALLMODULES} | sed -e's, , --with-modules=,g')"
	CYGCONF_ARGS="${WITHMODS} --docdir=/usr/share/doc/${PN} --without-dynamic-modules"
	;;
    x86_64)
	PATCH_URI+=" no_regexp.patch"
	MODULES="rawsock dirkey"
	EXTRA_MODULES=
	ALLMODULES="${MODULES} ${EXTRA_MODULES}"
	WITHMODS="--with-modules=$(echo ${ALLMODULES} | sed -e's, , --with-modules=,g')"
	CYGCONF_ARGS="${WITHMODS} --docdir=/usr/share/doc/${PN} --without-dynamic-modules --ignore-absence-of-libsigsegv --without-ffcall"
	;;
esac
	
export CFLAGS
LDFLAGS="-Wl,--stack,8388608"
export LDFLAGS

# do not strip for (disassemble)
RESTRICT="debuginfo strip"

src_compile() {
    cd ${S}
    verbose ./configure --prefix=/usr ${CYGCONF_ARGS} ${B} \
	     || error "configure failed"
    cd ${B}
    mkdir -p gdi
    lndir ${S}/modules/gdi gdi
    cygmake "MODULES=${ALLMODULES}"
    if [ "${ARCH}" = i686 ]
    then
	rm -rf full
	cygmake full "MODULES=${MODULES}"
	# now use the linkkit for the three separate modules
	for m in ${EXTRA_MODULES}
	do
    	    fixed_m=`echo $m | sed s,clx/,,`
    	    if [ "$m" = "gtk2" ]; then m="gtk2 dbus"; fi
    	    CLISP_LINKKIT=. ./clisp-link add full "full+${fixed_m}" $m \
		|| error "full+${fixed_m} failed"
	done
    fi
}

src_install() {
    cd ${B}
    sed -i -e "s|^MODULES = $|MODULES = ${MODULES}|" Makefile
    cyginstall
    if [ "${ARCH}" = i686 ]
    then
	for m in ${EXTRA_MODULES}
	do
	    fixed_m=`echo $m | sed s,clx/,,`
	    docinto ${fixed_m}
	    pushd ${S}/modules/$m
	    dodoc README ChangeLog TODO COPYRIGHT
	    popd
	    insdir=/usr/lib/${PN}-${PV}/full+${fixed_m}
	    insinto ${insdir}
	    doins full+${fixed_m}/*
	    chmod 0755 ${D}${insdir}/lisp.exe
	    # resolve .o as links; force relative links
	    pushd ${D}${insdir}
	    for o in *.o *.a *.dvi; do
		if [ -e "../full/$o" ]; then
		    ln -fs ../full/$o $o
		fi
	    done
	    popd
	done
    fi
}

src_test() {
    cd ${B}
    make -k check || true
    make -k mod-check "MODULES=${MODULES}" || true
    for m in ${EXTRA_MODULES}
    do
	fixed_m=`echo $m | sed s,clx/,,`
	./clisp -K full+${fixed_m} -E UTF-8 -Epathname 1:1 -Emisc 1:1 \
		-norc -C -i tests/tests -x \
		"(ext:exit (plusp (or (run-some-tests :dirlist '($m)) 0)))" \
	    || true
    done
}

## Reini's comments:

# --with-libpari-prefix=/usr/local --with-module=pari fails at freeall() and init_opts
# --without-unicode see sf.net bugs
# --with-module=matlab requires the redistributable matlab dll's in your path. 
#   maybe this requires an extra clisp-matlab package. Fixed by --with-dynamic-modules
#   but --with-dynamic-modules is too big and only suitable for on-demand clisp-xxx packages
# --with-module=fastcgi is linked statically, so (FASTCGI:ACCEPT) works in 
#   clisp -K full without installed fcgi. Note: Tests with lighttpd dumped core.
# --with-module=gdi is Dan Stangers experimental gdi interface (native windows gui)
# --with-dynamic-modules fixed, but not enabled. Too big.
# --with-jitc=lightning in work. Too slow yet and still in its infancy.
# --with-threads works, but too slow
# --with-wildcard added with 2.48-1 

