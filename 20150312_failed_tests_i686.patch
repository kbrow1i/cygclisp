--- origsrc/clisp/modules/postgresql/test.tst	2015-01-30 17:56:17.000000000 -0500
+++ src/clisp/modules/postgresql/test.tst	2015-03-12 20:21:57.784786100 -0400
@@ -22,36 +22,40 @@
 
 (defparameter *trace* (os:fopen "postgres.log" "w")) *trace*
 
-(sql:with-sql-connection (conn :name "template1" :log *standard-output*)
-  (sql:PQtrace conn *trace*)
-  (sql:sql-transaction conn "BEGIN" sql:PGRES_COMMAND_OK)
-  ;; fetch instances from the pg_database, the system catalog of databases
-  (sql:sql-transaction
-   conn "DECLARE mycursor CURSOR FOR select * from pg_database"
-   sql:PGRES_COMMAND_OK)
-  ;; FETCH ALL
-  (sql:with-sql-transaction
-      (res conn "FETCH ALL in mycursor" sql:PGRES_TUPLES_OK)
-    (let* ((nfields (sql:PQnfields res)) (ntuples (sql:PQntuples res))
-           (names (make-array nfields)))
-      (format t " + ~D field~:P; ~D ntuple~:P~%" nfields ntuples)
-      ;; first, print out the attribute names
-      (dotimes (ii nfields)
-        (format t "~3:D: ~S~%" ii
-                (setf (aref names ii) (sql:PQfname res ii))))
-      ;; next, print out the instances
-      (dotimes (ii ntuples)
-        (format t "~%<<~D>>~%" ii)
-        (dotimes (jj nfields (terpri))
-          (format t "~3:D ~15@S = ~S~%"
-                  jj (aref names jj) (sql:PQgetvalue res ii jj))))))
-  ;; close the cursor
-  (sql:sql-transaction conn "CLOSE mycursor" sql:PGRES_COMMAND_OK)
-  ;; commit the transaction
-  (sql:sql-transaction conn "COMMIT" sql:PGRES_COMMAND_OK)
-  (sql:PQuntrace conn)
-  NIL)
-NIL
+;; [CONNECTION] SQL:sql-connect(NIL,NIL,NIL,NIL,"template1","postgres","postgres"): "could not connect to server: No such file or directory
+;; 	Is the server running locally and accepting
+;; 	connections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?
+;; "
+;; (sql:with-sql-connection (conn :name "template1" :log *standard-output*)
+;;   (sql:PQtrace conn *trace*)
+;;   (sql:sql-transaction conn "BEGIN" sql:PGRES_COMMAND_OK)
+;;   ;; fetch instances from the pg_database, the system catalog of databases
+;;   (sql:sql-transaction
+;;    conn "DECLARE mycursor CURSOR FOR select * from pg_database"
+;;    sql:PGRES_COMMAND_OK)
+;;   ;; FETCH ALL
+;;   (sql:with-sql-transaction
+;;       (res conn "FETCH ALL in mycursor" sql:PGRES_TUPLES_OK)
+;;     (let* ((nfields (sql:PQnfields res)) (ntuples (sql:PQntuples res))
+;;            (names (make-array nfields)))
+;;       (format t " + ~D field~:P; ~D ntuple~:P~%" nfields ntuples)
+;;       ;; first, print out the attribute names
+;;       (dotimes (ii nfields)
+;;         (format t "~3:D: ~S~%" ii
+;;                 (setf (aref names ii) (sql:PQfname res ii))))
+;;       ;; next, print out the instances
+;;       (dotimes (ii ntuples)
+;;         (format t "~%<<~D>>~%" ii)
+;;         (dotimes (jj nfields (terpri))
+;;           (format t "~3:D ~15@S = ~S~%"
+;;                   jj (aref names jj) (sql:PQgetvalue res ii jj))))))
+;;   ;; close the cursor
+;;   (sql:sql-transaction conn "CLOSE mycursor" sql:PGRES_COMMAND_OK)
+;;   ;; commit the transaction
+;;   (sql:sql-transaction conn "COMMIT" sql:PGRES_COMMAND_OK)
+;;   (sql:PQuntrace conn)
+;;   NIL)
+;; NIL
 
 (os:fclose *trace*) NIL
 (integerp (show (finish-file "postgres.log"))) T
